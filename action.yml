name: 'Build Image'
description: 'Build dotnet app image'

inputs:
  app:
    required: true
    description: "App Name"
  src:
    required: true
    description: "Source path"
    default: "src"
  nuget-api-url:
    description: "NuGet URL"
  nuget-api-key:
    description: 'NuGet API key'
  artifact:
    description: "Artifact Name"
  image-prefix:
    description: "full image name, ex: [image-prefix]/[app]"
  branch-production:
    description: "Production Branch"
    default: "main"
  branch-staging:
    description: "Staging Branch"
    default: "stg"
  branch-development:
    description: "Development Branch"
    default: "dev"

outputs:
  app:
    description: "App Name"
    value: ${{ steps.envs.outputs.app }}
  image:
    description: "Image Name"
    value: ${{ steps.envs.outputs.image }}
  tag:
    description: "Image Tag"
    value: ${{ steps.envs.outputs.tag }}
  tag-hash:
    description: "Image Tag with hash"
    value: ${{ steps.envs.outputs.tag-hash }}
  tag-latest:
    description: "Image Tag with latest"
    value: ${{ steps.envs.outputs.tag-latest }}
  branch:
    description: "Branch name"
    value: ${{ steps.envs.outputs.branch }}
  actor:
    description: "Actor"
    value: ${{ steps.envs.outputs.actor }}
  email:
    description: "Email"
    value: ${{ steps.envs.outputs.email }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/download-artifact@v3
      if: inputs.artifact != ''
      with:
        name: ${{ inputs.artifact }}
        path: ${{ inputs.src }}
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Add NuGet Source
      shell: bash
      if: inputs.nuget-api-url != '' && inputs.nuget-api-key != ''
      run: dotnet nuget add source --username USERNAME --password ${{ inputs.nuget-api-key }} --store-password-in-clear-text --name nuget-${{ github.run_id }} "${{ inputs.nuget-api-url }}"
    - name: Install dotnet tool
      shell: bash
      run: dotnet tool install -g --prerelease netcorext.tools.assemblyinfo
    - name: Set Environments
      id: envs
      shell: bash
      run: |
        APP="${{ inputs.app }}"
        IMAGE=`echo "${APP,,}" | sed 's/\./-/g'`

        if [ ! -z "${{ inputs.image-prefix }}" ]; then
          IMAGE="${{ inputs.image-prefix }}/${IMAGE}"
        fi

        COMMIT_SHORT_SHA=`git rev-parse --short ${GITHUB_SHA}`
        COMMIT_COUNT=`git rev-list --count HEAD`
        COMMIT_TIME=`git show -s --format=%ct HEAD`
        ADDITIONAL_ARGUMENTS="-c Debug --version-suffix ${GITHUB_REF_NAME}.${COMMIT_TIME}+${COMMIT_SHORT_SHA}"
        TAG_LATEST="${GITHUB_REF_NAME}-latest"
        USERNAME=`git log -n 1 --pretty=format:%an`
        EMAIL=`git log -n 1 --pretty=format:%ae`

        PROJECT_PATH=`find ${{ inputs.src }} -type f -iname "${APP}.csproj"`

        dotnet build $PROJECT_PATH -o ./dist

        ASSEMBLY_VERSION=`asm-info ./dist/${APP}.dll --simple --version`

        rm -rf ./dist

        TAG="${ASSEMBLY_VERSION}-${GITHUB_REF_NAME}.${COMMIT_TIME}"

        if [ "$GITHUB_REF_NAME" = "${{ inputs.branch-production }}" ]; then
          ADDITIONAL_ARGUMENTS="-c Release"
          TAG="${ASSEMBLY_VERSION}"
          TAG_LATEST="latest"
        fi

        echo "::set-output name=app::$APP"
        echo "::set-output name=image::$IMAGE"
        echo "::set-output name=tag::$TAG"
        echo "::set-output name=tag-hash::$COMMIT_SHORT_SHA"
        echo "::set-output name=tag-latest::$TAG_LATEST"
        echo "::set-output name=build-options::$ADDITIONAL_ARGUMENTS"
        echo "::set-output name=branch::$GITHUB_REF_NAME"
        echo "::set-output name=actor::$USERNAME"
        echo "::set-output name=email::$EMAIL"
    - name: Create Dockerfile
      shell: bash
      run: |
        cat > dockerfile << EOF
        FROM mcr.microsoft.com/dotnet/aspnet:6.0-alpine AS base
        ENV ASPNETCORE_ENVIRONMENT=Production
        WORKDIR /app
        VOLUME [ "/app" ]
        EXPOSE 80 443

        FROM mcr.microsoft.com/dotnet/sdk:6.0-alpine AS build
        ARG APP \\
            ADDITIONAL_ARGUMENTS \\
            NUGET_API_KEY \\
            NUGET_API_URL
        WORKDIR /sources
        COPY . /sources
        WORKDIR src/\${APP}

        RUN if [ ! -z "\$NUGET_API_KEY" ] && [ ! -z "\$NUGET_API_URL" ]; then dotnet nuget add source --username USERNAME --password \$NUGET_API_KEY --store-password-in-clear-text --name github "\$NUGET_API_URL"; fi
        RUN dotnet restore --no-cache
        RUN dotnet publish \${ADDITIONAL_ARGUMENTS} -o /dist

        FROM base AS final
        WORKDIR /app
        COPY --from=build /dist .
        ENTRYPOINT export APP=\$(basename *.runtimeconfig.json .runtimeconfig.json) && dotnet \$APP.dll
        EOF
    - name: Build Images
      shell: bash
      run: |
        docker build \
        --build-arg APP="${{ steps.envs.outputs.app }}" \
        --build-arg ADDITIONAL_ARGUMENTS="${{ steps.envs.outputs.build-options }}" \
        --build-arg NUGET_API_KEY="${{ inputs.nuget-api-key }}" \
        --build-arg NUGET_API_URL="${{ inputs.nuget-api-url }}" \
        -t ${{ steps.envs.outputs.image }}:${{ steps.envs.outputs.tag }} \
        -t ${{ steps.envs.outputs.image }}:${{ steps.envs.outputs.tag-hash }} \
        -t ${{ steps.envs.outputs.image }}:${{ steps.envs.outputs.tag-latest }} \
        .